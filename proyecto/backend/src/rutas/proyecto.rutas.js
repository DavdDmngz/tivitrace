const express = require('express');
const { body, param, validationResult } = require('express-validator');
const proyectoControlador = require('../controladores/proyecto.controlador');
const { validarAutenticacion, validarRol } = require('../core/config/passport.config');

const router = express.Router();

// Middleware para manejar errores de validaciÃ³n
const validarCampos = (req, res, next) => {
    const errores = validationResult(req);
    if (!errores.isEmpty()) {
        return res.status(400).json({ errores: errores.array() });
    }
    next();
};

// ðŸ“Œ Obtener todos los proyectos (solo administrador y supervisor)
router.get(
    '/',
    validarAutenticacion,
    validarRol(['administrador', 'supervisor']),
    proyectoControlador.obtenerProyectos
);

// ðŸ“Œ Obtener un proyecto por ID (solo administrador y supervisor)
router.get(
    '/:id',
    [
        validarAutenticacion,
        validarRol(['administrador', 'supervisor']),
        param('id')
            .notEmpty().withMessage('El ID es obligatorio')
            .isInt({ min: 1 }).withMessage('El ID debe ser un nÃºmero entero positivo')
    ],
    validarCampos,
    proyectoControlador.obtenerProyectoPorId
);

// ðŸ“Œ Crear un nuevo proyecto (solo administrador y supervisor)
router.post(
    '/',
    [
        validarAutenticacion,
        validarRol(['administrador', 'supervisor']),
        body('nombre')
            .notEmpty().withMessage('El nombre es obligatorio')
            .isString().withMessage('El nombre debe ser una cadena de texto'),
        body('descripcion')
            .optional()
            .isString().withMessage('La descripciÃ³n debe ser una cadena de texto'),
        body('progreso')
            .optional()
            .isFloat({ min: 0, max: 100 }).withMessage('El progreso debe estar entre 0 y 100')
    ],
    validarCampos,
    proyectoControlador.crearProyecto
);

// ðŸ“Œ Actualizar un proyecto (solo administrador y supervisor)
router.put(
    '/:id',
    [
        validarAutenticacion,
        validarRol(['administrador', 'supervisor']),
        param('id')
            .notEmpty().withMessage('El ID es obligatorio')
            .isInt({ min: 1 }).withMessage('El ID debe ser un nÃºmero entero positivo'),
        body('nombre')
            .notEmpty().withMessage('El nombre es obligatorio')
            .isString().withMessage('El nombre debe ser una cadena de texto'),
        body('descripcion')
            .optional()
            .isString().withMessage('La descripciÃ³n debe ser una cadena de texto'),
        body('progreso')
            .optional()
            .isFloat({ min: 0, max: 100 }).withMessage('El progreso debe estar entre 0 y 100')
    ],
    validarCampos,
    proyectoControlador.actualizarProyecto
);

// ðŸ“Œ Eliminar un proyecto (solo administrador y supervisor)
router.delete(
    '/:id',
    [
        validarAutenticacion,
        validarRol(['administrador', 'supervisor']),
        param('id')
            .notEmpty().withMessage('El ID es obligatorio')
            .isInt({ min: 1 }).withMessage('El ID debe ser un nÃºmero entero positivo')
    ],
    validarCampos,
    proyectoControlador.eliminarProyecto
);

module.exports = router;